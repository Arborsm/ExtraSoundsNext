plugins {
    id 'com.github.johnrengelman.shadow'
}

loom {
    forge {
        mixinConfig "extrasounds.mixins.json"
        mixinConfig "extrasounds-forge.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_version"

    //modImplementation "dev.architectury:architectury-forge:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')

    // JEI
    modImplementation(common.jei.forge) { transitive = false }

    // REI
    modCompileOnly common.rei.forge

    // EMI
    modImplementation common.emi.forge
}

processResources {
    var properties = [
            "version"          : version,
            "mod_id"           : mod_id,
            "minecraft_version": libs.versions.minecraft.get(),
            "mod_license"      : mod_license,
            "mod_name"         : mod_name,
            "mod_description"  : mod_description,
            "mod_url"          : mod_url,
            "mod_authors"      : mod_authors,
    ]
    inputs.properties(properties)

    filesMatching('META-INF/mods.toml') {
        expand properties
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
